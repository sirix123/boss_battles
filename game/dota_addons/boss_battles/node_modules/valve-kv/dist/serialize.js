"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serialize = void 0;
const index_1 = require("./index");
function serialize(kvobject) {
    const roots = [];
    for (const [key, value] of Object.entries(kvobject)) {
        if (index_1.isKvObject(value)) {
            roots.push(`"${key}"\n` + serializeIndented(value, 0));
        }
        else {
            roots.push(`"${key}"    ${value}`);
        }
    }
    return roots.join("\n\n");
}
exports.serialize = serialize;
function serializeIndented(kvobject, indent = 0) {
    let result = [indentString(indent) + "{"];
    for (const [key, value] of Object.entries(kvobject)) {
        result.push(serializeKeyValue(key, value, indent));
    }
    result.push(indentString(indent) + "}");
    return result.join("\n");
}
function serializeKeyValue(key, value, indent = 0) {
    if (typeof value === "string") {
        return `${indentString(indent + 1)}"${key}"    "${escape(value)}"`;
    }
    else if (typeof value === "number") {
        return `${indentString(indent + 1)}"${key}"    "${value}"`;
    }
    else if (Array.isArray(value)) {
        if (index_1.isDuplicateKeyArray(value)) {
            return value.map(v => serializeKeyValue(key, v, indent)).join("\n");
        }
        else {
            return `${indentString(indent + 1)}"${key}"\n`
                + serializeIndented(index_1.arrayToKvObject(value), indent + 1);
        }
    }
    else {
        return `${indentString(indent + 1)}"${key}"\n`
            + serializeIndented(value, indent + 1);
    }
}
function escape(unescaped) {
    return unescaped
        .replace(/\\/g, "\\\\")
        .replace(/"/g, '\\"');
}
const indentString = (count) => "    ".repeat(count);
